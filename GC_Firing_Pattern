# -*- coding: utf-8 -*-
"""
Created on Wed Apr 10 09:57:53 2024

simulate GC bursts

@author: klab
"""

import matplotlib.pyplot as plt 
plt.rcParams['pdf.fonttype'] = 42
plt.rcParams.update({'font.size': 10})
import numpy as np 
import random
import quantities as pq  
import elephant



lowState = 0
highState = 5

episodeStart = 0
episodeEnd = 30

samplingRate = 5000

pulseDuration = 0.001

def pdf(x, mean, std): 
    '''
    

    Parameters
    ----------
    x : array-like
        the spectrum of values.
    mean : float
        the expecred mean.
    std : float
        the expected standard error.

    Returns
    -------
    y : array
        a power density function calculated over x.

    '''
    y = 1/(std * np.sqrt(2 * np.pi)) * np.exp( - (x - mean)**2 / (2 * std**2)) 
    
    return y



def determine_feature(minvalue, maxvalue, mean, std, function): 
    '''

    Generates a pdf based on input parameters and returns a randomly picked value from pdf (weighted)

    Parameters
    ----------
    minvalue : float
        the minimum value of the distribution.
    maxvalue : float
        the maximum value of the distribution.
    mean : float
        the average of the distribution.
    std : float
        the standard error of the distribution.
    function : python.function
        the function to establish gaussian probability distribution function.

    A value randomly picked from the prob. distribution function
    -------
    None.

    '''
    
    x = np.linspace(minvalue, maxvalue, 13) #There are 13 cells reported in Jelitai et al., 2016
    yPdf = function(x, mean, std)*1000 #*1000 to get scalable integers

    #plt.bar(x, yPdf)

    #Build a list of values: occurence is weighted by pdf, then random draw from it to get burst feature
    drawList = np.concatenate([np.ones(int(j))*i for i,j in zip(x, yPdf)])
    feat = random.choice(drawList)
    return feat


def generate_GC_firing_pattern(rate, start, stop, samplingrate=20000, lowState=0, highState=5, pulseDuration = 0.001):
    '''

    Generates a GC firing pattern, to be fed in the NiDaqMx

    Parameters
    ----------
    rate : float
        The occurence of bursts in the whole train - should be 1 to 3 according to Jelitai 2016
    start : float
        time to start
    stop : float
        time to stop

    '''
    
    #Generate an overall 30 seconds episode in which each event represents a locomotor event 
    episode = elephant.spike_train_generation.homogeneous_poisson_process(rate=rate*pq.Hz,
                                                                          t_stop=stop*pq.s,
                                                                          t_start=start*pq.ms, 
                                                                          as_array=True)
    
    episode_isi = elephant.statistics.isi(episode)
    episode_cv = np.nanstd(episode_isi) / np.nanmean(episode_isi)
    
    assert 0.55 < episode_cv < 1.86, 'interburst CV is out of 0.55 - 1.86 range'
    
    listOfBursts = []
    
    #Now it's time to proceed locomotor event by locomotor event: 
    for event in episode: 
        
        intraBurstFreq = determine_feature(59.84, 141.8, 94.3, 25.74, pdf)*pq.Hz
        spikesInBurst = determine_feature(3, 168, 11, 2.1, pdf)
        burstDuration = determine_feature(33.14, 144.1, 76.14, 33.50, pdf)*pq.ms
        burstCV = determine_feature(0.55, 1.86, 1.18, 0.38, pdf)
        
        burst = elephant.spike_train_generation.homogeneous_poisson_process(rate=intraBurstFreq, 
                                                                            t_stop = event*pq.s+burstDuration, 
                                                                            t_start = event*pq.s, 
                                                                            as_array=True, 
                                                                            refractory_period=7*pq.ms)
        
        listOfBursts.append(burst)
        
    #Turn list of bursts in a continous 5V signal  ----------------------------------------------------------------
    
    ttlTimeVector = np.arange(start, stop, 1/samplingrate)
    wave = np.ones(len(ttlTimeVector))*lowState
    
    for i in range(len(np.concatenate(listOfBursts))): 
        
        wave[np.where(ttlTimeVector>np.concatenate(listOfBursts)[i])[0]] = highState
        wave[np.where(ttlTimeVector>np.concatenate(listOfBursts)[i]+pulseDuration)[0][1:]] = lowState
        
    return ttlTimeVector, wave
    

if __name__ == '__main__': 
    
    fig, ax = plt.subplots(1,1, figsize=(6,2))

    ax.set_ylabel('State (V)')
    ax.set_xlabel('Time [s]')
    
    
    episode = generate_GC_firing_pattern(3, 0, 30, highState=1)
    
    ax.plot(episode[0], episode[1])
    
    plt.tight_layout()
    
    #Save file
    np.savetxt('D:/00_KLAB/ANALYSIS/EtOh_Project/GC_Firing_Patterns/GC_Pattern_5_20hKz.txt', episode[1], delimiter=',')
    fig.savefig('D:/00_KLAB/ANALYSIS/EtOh_Project/GC_Firing_Patterns/GC_Pattern_5_20hKz.png')
    
    # f = open('D:/00_KLAB/ANALYSIS/EtOh_Project/GC_Firing_Patterns/TestFile1.txt', 'wb')
    # f.write(bytes(episode[1]))
    # f.close()
    
    
    
    # #Generate an overall 30 seconds episode in which each event represents a locomotor event 
    # locomotor_episode = elephant.spike_train_generation.homogeneous_poisson_process(rate=3*pq.Hz,
    #                                                                              t_stop=episodeEnd*pq.s,
    #                                                                              t_start=episodeStart*pq.ms, 
    #                                                                              as_array=True)
    
    # locomotor_episode_isi = elephant.statistics.isi(locomotor_episode)
    # locomotor_episode_cv = np.nanstd(locomotor_episode_isi) / np.nanmean(locomotor_episode_isi)
    
    # assert 0.55 < locomotor_episode_cv < 1.86, 'interburst CV is out of 0.55 - 1.86 range'
    
    # listOfBursts = []
    
    # #Now it's time to proceed locomotor event by locomotor event: 
    # for event in locomotor_episode: 
        
    #     intraBurstFreq = determine_feature(59.84, 141.8, 94.3, 25.74, pdf)*pq.Hz
    #     spikesInBurst = determine_feature(3, 168, 11, 2.1, pdf)
    #     burstDuration = determine_feature(33.14, 144.1, 76.14, 33.50, pdf)*pq.ms
    #     burstCV = determine_feature(0.55, 1.86, 1.18, 0.38, pdf)
        
    #     burst = elephant.spike_train_generation.homogeneous_poisson_process(rate=intraBurstFreq, 
    #                                                                         t_stop = event*pq.s+burstDuration, 
    #                                                                         t_start = event*pq.s, 
    #                                                                         as_array=True, 
    #                                                                         refractory_period=7*pq.ms)
        
    #     ax[0].eventplot(burst)
        
    #     listOfBursts.append(burst)
        
    # #Turn list of bursts in a continous 5V signal  ----------------------------------------------------------------
    
    # ttlTimeVector = np.arange(episodeStart, episodeEnd, 1/samplingRate)
    # wave = np.ones(len(ttlTimeVector))*lowState
    
    # for i in range(len(np.concatenate(listOfBursts))): 
        
    #     wave[np.where(ttlTimeVector>np.concatenate(listOfBursts)[i])[0]] = highState
    #     wave[np.where(ttlTimeVector>np.concatenate(listOfBursts)[i]+pulseDuration)[0][1:]] = lowState
        
    
    # ax[1].plot(ttlTimeVector, wave)

    
